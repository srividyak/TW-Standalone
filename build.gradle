apply plugin: 'java'
apply plugin: 'application'

sourceCompatibility = 1.7
version = '1.0'

mainClassName="com.tapwisdom.core.Main"

//mainClassName="com.tapwisdom.core.notification.GCMSample"
repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url "http://oss.sonatype.org/content/repositories/snapshots"
    }
}

configurations {
    provided
    sshAntTask
}

dependencies {
    compile project(':common')
    compile project(':jobs')
    compile project(':miscellaneous-jobs')
    compile project(':notifications')
    compile 'com.google.code.gson:gson:2.2.4'
    testCompile group: 'junit', name: 'junit', version: '4.11'

    sshAntTask 'org.apache.ant:ant-jsch:1.9.2'
}

task(resourcesCopy, type: Copy) {
    from(file("config/common.properties"))
    into("/tmp/tw/")
}

run {
    dependsOn resourcesCopy
    systemProperty 'config.path', '/tmp/tw'
}


//task distLocalTar(type: Exec) {
//    commandLine './scripts/include_config.sh ' + project.name + '-' +  project.version + ' tar'
//}
//
//distLocalTar {
//    dependsOn distTar
//}

// cmd to create tar: ./scripts/include_config.sh TW-Standalone-1.0 tar
// cmd: java -cp lib/*:config/ com.tapwisdom.core.Main

ant.taskdef(
        name: 'scp',
        classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp',
        classpath: configurations.sshAntTask.asPath
)

ant.taskdef(
        name: 'ssh',
        classname: 'org.apache.tools.ant.taskdefs.optional.ssh.SSHExec',
        classpath: configurations.sshAntTask.asPath
)

task deployTarToDev() << {
    def knownHosts = File.createTempFile("knownhosts", "txt")
    def user = 'ec2-user'
    def host = 'ec2-54-68-236-116.us-west-2.compute.amazonaws.com'
    def privateKey = file('/Users/srividyak/.ssh/Vidya_mac.pem')

    try {

        // Example to copy files to a remote host.
        ant.scp(
                file: file("$buildDir/distributions/TW-Standalone-1.0.tar"),
                todir: "${user}@${host}:/tw/standalone",
                keyfile: privateKey,
                trust: true,
                knownhosts: knownHosts
        )

    } finally {
        knownHosts.delete()
    }
}

 
